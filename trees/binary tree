Max # of nodes on i th level  = 2^i;

Max # of nodes in the tree(complete binary tree) 2^(i+1) - 1

if i is the index of the node then it's left child will be at (2i+1) & the rigth child will be at (2i+2)
and its parent will be at (i-1)/2

tress are used since it can be traversed in many ways, not like arrays
preOrder(DLR)
inOrder(LDR)
postOrder(LRD)
where D is visiting the node

the way these traversal works eg preOrder 
Step1) visit the node (break, start again)
Step2) that node is visited in step1 so move to the left(break, start all over again)
Step2) so print the node in step2 (because that's the step1 in a new iteration)

void preOrder(Node root){

  if(root != null){
    
    System.out.println(root.data);
    preOrder(root.left);
    preOrder(root.rigth);
    
  }
}


In-order, Pre-order, and Post-order traversals are Depth-First traversals.

For a Graph, the complexity of a Depth First Traversal is O(n + m), where n is the number of nodes, and m is the number of edges.

Since a Binary Tree is also a Graph, the same applies here. The complexity of each of these Depth-first traversals is O(n+m).

Since the number of edges that can originate from a node is limited to 2 in the case of a Binary Tree, the maximum number of total edges in a Binary Tree is n-1, where n is the total number of nodes.

The complexity then becomes O(n + n-1), which is O(n).


Height of the node = number of edges in longest path from the node to a leaf node 
Height of the tree = Height of root

Depth of the node = number of edges in path from root to that node
Depth of the tree = depth of the leaf node 

https://www.youtube.com/watch?v=_pnqMz5nrRs (2.37)  


import java.io.*;
import java.util.*;

/*
 * Insert into Binary tree and print in inorder
 */

class TreeNode{
  
  TreeNode left, rigth;
  int data;
  
  TreeNode(){}
  
  TreeNode(int x){
    data = x;
    left = rigth = null;
    
  }
}
class Solution {
  //importan to declare root here
  static TreeNode root = null;
  
  public static void main(String[] args) {
    
    insert(2);
    insert(6);
    insert(4);
    insert(5);
    insert(1);
    insert(7);
    //System.out.println(root.data);
    //inorder(root);
    System.out.println("leaf count: "+ leafcount(root));
    System.out.println("heigth of the tree: "+height(root));
    System.out.println("# of nodes in the tree: "+nodecount(root));
    System.out.println("# of visible nodes in the tree: "+countVisible(root));
   
    
  }
  
  public static void insert(int x){
    
    TreeNode temp,prev,p;
    
    temp = new TreeNode(x);
    
    if(root == null){
      
      root = temp;
      return;
    }
    
    p = root;
    prev = null;
    
    while(p != null){
      
      //duplicates are not added in the BST
      if(p.data == x)
      {
        return;
      }
      
      //note prev is also pointing to p before you move p
      prev = p;
      
      if(x < p.data){
        p = p.left;
      } else {
        p = p.rigth;
      }
      
    }
    
    
    if(x < prev.data){
      prev.left = temp;
    }else{
      prev.rigth = temp;
    }
  }
  //inorder in by passig the root node not empty inorder
  public static void inorder(TreeNode root){
    
    // it's if not while
    if( root != null){
      
      inorder(root.left);
      System.out.println(root.data);
      inorder(root.rigth);
      
    }
  }
  
  
  public static int leafcount(TreeNode root){
    int l,r;
    //for empty tree and when either root.left or root.rigth is null
    if(root == null)
      return 0;
    
    // you are at the leaf node 
    if(root.left == null && root.rigth == null){
      //System.out.println("leaf node: "+ root.data);
      return 1;
    }
    
    l = leafcount(root.left);
    r = leafcount(root.rigth);
    // count of left and rigth
    return l+r;
  }
  
  
  public static int height(TreeNode root){
    int l,r;
    
    //you have reached root.left or root.rigth here which is null and has no height
    if(root == null){
      return -1;
    }
    // you are at the leaf node and height of the leaf node is 0
    if(root.left == null && root.rigth == null)
      return 0;
    
    l = height(root.left);
    r = height(root.rigth);
    //+1 is the edge connecting the root to the sub tree
    return Math.max(l,r) + 1;
  }
  
  public static int nodecount(TreeNode root){
    
    int l,r;
    
    if(root == null)
      return 0;
      
    
    l = nodecount(root.left);
    r = nodecount(root.rigth);
    // 1 is only when there is a single node (root)
    //add height of the left + height of the right sub tree
    return 1 + l + r;
  }
  
  /* In a binary tree, if in the path from the root to the node A, there is no
 * node with value greater than A's value, then A is a visible node. We need 
 * to count the number of visible nodes in a binary tree.
 * root node is included in this
 */
  public static int countVisible(TreeNode root){
            //Integer.MIN_VALUE is the lowest possible int 
            //helper because we don't want to initiliaze max value everytime
            //only first time we give the value
    return helper(root, Integer.MIN_VALUE);
  }
  
  
  private static int helper(TreeNode root, int prevmax){
    
    if(root == null)
      return 0;
    
    int newmax = Math.max(prevmax, root.data);
    //prevmax not newmax
    if(prevmax < root.data){
      //System.out.println(root.data);
      return 1 + helper(root.left, newmax) + helper(root.rigth, newmax);
    } 
    else {
      return helper(root.left, newmax) + helper(root.rigth, newmax);
    }
}



