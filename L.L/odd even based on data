Given a Linked List of integers, write a function to modify the linked list such that 
all even numbers appear before all the odd numbers in the modified linked list. Also, keep the order of even and odd numbers same.

Examples:
Input: 17->15->8->12->10->5->4->1->7->6->NULL
Output: 8->12->10->4->6->17->15->5->1->7->NULL


import java.io.*;
import java.util.*;

/*
 * We can use a fast and slow pointer to get the center of the list, then reverse the second list and compare two sublists. The time is O(n) and space is O(1).
 */
class Node{
    
    int data;
    Node next;
    
    Node(int d){
      data = d;
      next = null;
    }
  }

class Solution{
  
  public static void main(String args []){
   
    Node start = new Node(81);
    start.next = new Node(8);
    //start.next.next = new Node(8);
    //start.next.next.next = new Node('m');
    //start.next.next.next = new Node(12);
    //start.next.next.next.next = new Node(10);
    
    Node newList = oddEven(start);
    
    Node ptr = newList;
    while(ptr != null){
           
       System.out.println("Is the L.L palindrome: "+ ptr.data);
      ptr = ptr.next;
    }
    
    
  }
  
  

  public static Node oddEven(Node root){

    if(root == null)
      return root;

    Node odd =null;
    Node even = null;
    Node oddh = null;
    Node evenh = null;
    Node curr = null;
    
    curr = root;
    
    while(curr != null){
      
      Node temp = new Node(curr.data);
      //odd case
      if(curr.data % 2 == 1){
        
        if(oddh == null){
          oddh = temp;
          odd = oddh;
        }
        else{
          odd.next = temp;
          odd = temp;
        }
      }
      else {
        
        if(evenh == null){
          evenh = temp;
          even = evenh;
        }
        else{
          even.next = temp;
          even = temp;
        }
      }
      
      curr = curr.next;
    }
    
    //if there is only odd list
    if(evenh != null)
      even.next = oddh;
    
    //imp condition
    return (evenh != null ? evenh : oddh);
    
   }
}

