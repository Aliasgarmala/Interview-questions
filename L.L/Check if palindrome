METHOD 1 (Use a Stack)
A simple solution is to use a stack of list nodes. This mainly involves three steps.
1) Traverse the given list from head to tail and push every visited node to stack.
2) Traverse the list again. For every visited node, pop a node from stack and compare data of popped node with currently visited node.
3) If all nodes matched, then return true, else false.

Time complexity of above method is O(n), but it requires O(n) extra space. Following methods solve this with constant extra space.

Time complexity of above method is O(n) space complexity O(1)
import java.io.*;
import java.util.*;

/*
 * We can use a fast and slow pointer to get the center of the list, then reverse the second list and compare two sublists.
 The time is O(n) and space is O(1).
 */


class Solution{
  
 class Foo{
	public static void main(String args[]) {
		char[] words = {'m','m','a','a','m', 'm'};
		System.out.println("isPalindrome "+isPalindrome(words));
	}
	
	public static boolean isPalindrome(char[] words) {
	
		int i = 0;
		int j = words.length -1;
	
		while(j>i) {
			if(words[i] != words[j])
			return false;
			
			j--;
			i++;
		}
		
		return true;
	}
}

 
}
