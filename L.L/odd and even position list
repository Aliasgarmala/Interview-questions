Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.


public static Node oddEven(Node root){

    if(root == null || root.next == null || root.next.next == null)
      return root;

    Node odd = root;
    Node even = root.next;
    Node evenroot = even;
    //it is in the 3rd position
    Node curr = even.next
   // i != 0 because we already have first position in place
    int i = 1;
    //move the node only one counter and append odd and even as per their position
    // can't move 2 pointer
    while(curr != null){
      //odd position
      if(i%2 == 1){
        
        odd.next = curr;
        odd = curr;
        
      } else {
        even.next = curr;
        even = curr
      }
      
      curr = curr.next;
      
    }
    //make the last node of even to null as it always will be null
    even.next = null;
    //append the odd to the start of even list
    odd.next = evenroot;
    
    return root
    
   }
}
