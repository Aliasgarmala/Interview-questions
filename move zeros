//Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

//For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

public class Solution {

  public static void main(String[] args) {
   
    //this shuld be Integer not int
    Integer [] arr = {0, 1, 0, 3, 12};
    
    ArrayList<Integer> arrList = new ArrayList<Integer>(Arrays.asList(arr));
    int countZero = 0;
    
    //ver important to use iterator here to traverse as well as remove elements
    Iterator<Integer> iterator = arrList.iterator();
    while(iterator.hasNext()){
      Integer num = iterator.next();
      if(num == 0){
        //here it is iterator remove
        iterator.remove();
        countZero++;
      }
    }
    
    while(countZero > 0){
      arrList.add(0);
      countZero--;
    }
    
    System.out.println(arrList);
  }
}


This is in place solution 

  public class Solution {

  public static void main(String[] args) {
   
   
    int [] arr = {0, 1, 0, 3, 0};
    
    moveZeroes(arr);
    
   System.out.println(Arrays.toString(arr));
    
  }
    
  public static void moveZeroes(int[] nums) {
    int i = -1, j = 0;
    while (j < nums.length) {
      //if there's no zero encountered yet, swap the number with itself
      // if condition is == then the zero's will be at the front 
      if (nums[j] == 0) {
          swap(++i, j, nums);

      }
      j++;
    }
  }

  public static void swap(int i, int j, int[] nums) {
      int temp = nums[i];
      nums[i] = nums[j];
      nums[j] = temp;
  }

}




