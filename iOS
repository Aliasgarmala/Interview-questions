The memory that we manage in the app is the RAM memory
by default the type is strong, weak does not increase reference count.

"There is no such thing as weak let. When you use weak,
the property should be optional and mutable in order to set it as nil or assign value to the delegate property.
Consequently, let is not allowed."

In Classes, when you make a copy of a variable,(var a = new A() & b = a) both variables are referring to the
same object in memory.A change to one of the variables will change the other (Reference Type).
In Structs, however, you simply copy and paste variables by creating a separate object (Value Type)

response coming from background thread (asynchronous/ @escaping method) should run on main thread DispatchQueue.main.async

The new defer keyword provides a closure that's executed only when execution leaves the current scope.
eg: useful for clearing resources

inout is used infront of the parameter type in function, to indicate of the parameter can be modified with-in the function

Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.

Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future.
Weak references are always of an optional type, and automatically become nil when the instance they reference is deallocated.
This enables you to check for their existence within the closureâ€™s body.

when to use computed propertv vs function 
you can replace a function with computed property if it has no argument and returns a value. 
1. If it doesn't throw 2. complexity is 0(1)  3. returns the same result over invocations 4. simple calculation

computed variables are always dependent on another variable. so you shoudln't have setter method to set `self`.
use observable properties for didSet

sudo gem install synx to remove orphaned files
