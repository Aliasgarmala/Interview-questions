import java.io.*;
import java.util.*;

/*
 * Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true.
 */

class Solution {
  
  static String s = "egg";
  static String t = "add";
  //LinkedHashMap very imp to keep the insertion order  
  static Map<Character, String> hmaps = new LinkedHashMap<Character, String>();
  static Map<Character, String> hmapt = new LinkedHashMap<Character, String>();
  
  
  
  public static void main(String[] args) {
    
    for(int i = 0; i < s.length(); i++){
      if(!hmaps.containsKey(s.charAt(i)))
        hmaps.put(s.charAt(i), i +"");
      else{
        hmaps.put(s.charAt(i), hmaps.get(s.charAt(i)) +""+ i);
      }
    }
    
   for(int i = 0; i < t.length(); i++){
      if(!hmapt.containsKey(t.charAt(i)))
        hmapt.put(t.charAt(i), i+"");
      else{
        hmapt.put(t.charAt(i), hmapt.get(t.charAt(i)) +""+ i);
      }
    }
    
    System.out.println(hmaps);
    System.out.println(hmapt);
    
    //compare values of 2 hashmap's 
    Set<String> values1 = new HashSet<String>(hmaps.values());
    Set<String> values2 = new HashSet<String>(hmapt.values());
    if(values1.equals(values2)){
      System.out.println("true");
    }else {
      System.out.println("false");
    }
  }
}
