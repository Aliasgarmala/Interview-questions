import java.io.*;
import java.util.*;

/*
 * Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
  The key to solve this problem is moving element of A and B backwards. 
  If B has some elements left after A is done, also need to handle that case.(this is the commented part)
  
  Algorithm diag:
  [1, 2, 4, 8, 0, 0, 0, 0, 8][2, 3, 4, 5, 7]
[1, 2, 4, 8, 0, 0, 0, 7, 8][2, 3, 4, 5, 7]
[1, 2, 4, 8, 0, 0, 5, 7, 8][2, 3, 4, 5, 7]
[1, 2, 4, 8, 0, 4, 5, 7, 8][2, 3, 4, 5, 7]
[1, 2, 4, 8, 4, 4, 5, 7, 8][2, 3, 4, 5, 7]
[1, 2, 4, 3, 4, 4, 5, 7, 8][2, 3, 4, 5, 7]
[1, 2, 2, 3, 4, 4, 5, 7, 8][2, 3, 4, 5, 7]
 */


  public class Solution {

  public static void main(String[] args) {
    
    int [] A = {1,2,4,8,0,0,0,0};
    int [] B = {2,3,4,5};
    int m = 4;
    int n = B.length;
   
   while(m > 0 && n > 0){
     
     if(A[m-1] > B[n-1]){
       //move the mth element to the last of the A
       A[m+n-1] = A[m-1];
       m--;
     } else {
        //move the nth element from B to the new last of A
        A[m+n-1] = B[n-1];
        n--;
     }
    }
    
    
    //this would be needed I guess when A is not appended with 0
 
    // while(n > 0){
    //     A[m+n-1] = B[n-1];
    //     n--;
    // }

    System.out.print(Arrays.toString(A));
  }
 
}



// when third array is available


public class Solution {

  public static void main(String[] args) {
    
    int [] A = {1,2,4,8,15};
    int [] B = {2,3,4,5};
   
    int [] result = new int[A.length+B.length];
    int i = 0, j = 0, k = 0;
    while( i < A.length && j < B.length){
      
      if(A[i] < B[j]){
        result[k] = A[i];
        i++;
      } else {
        result[k] = B[j];
        j++;
      }
      k++;
    }
    
    while( i < A.length){
      result[k] = A[i];
      i++;
      k++;
    }
    
    while( j < B.length){
      result[k] = B[j];
      j++;
      k++;
    }

    System.out.print(Arrays.toString(result));

      
  }
 
}
