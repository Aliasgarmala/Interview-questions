import java.io.*;
import java.util.*;
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
/*
 * arr = {1,2,3,4,5,6,7}
 * rev = {5,6,7,1,2,3,4}
 */

class Solution {
  public static void main(String[] args) {
    
    int [] arr = {1,2,3,4,5,6,7};
    int [] reverse = new int[7];
    int n = 7;
    int k = 3;
    
    for(int i = 0; i < arr.length; i++){
      System.out.println("k+i"+ (k+i)+" length"+ (arr.length - 1));
      
      if(( k + i ) <= arr.length - 1){
        
        reverse [ k + i ] = arr[i];
        
      } else {
        
       reverse[((k + i) - n )] = arr[i];
      }
      
      
    }
    
    Here the time and space complexity is O(n)
    
    Below code does inline changes.
    So, therefore the space complexity is O(1) and time complexity O(n)



class Solution {
  static  int [] arr = {1,2,3,4,5,6,7};
  public static void rotate(int [] arr, int order){
    //always check the common failure condition first
    if(arr == null || order < 0){
      throw new IllegalArgumentException("Illegal Argument Provided");
    }
    
    //length of the first part
    int a = arr.length - order;
    
    reverse(arr, 0, a -1);  
    reverse(arr, a, arr.length -1);
    reverse(arr, 0, arr.length -1);
  }
  // reverse the array in place
  public static void reverse(int [] arr, int left, int right){
    if(arr == null || arr.length == 1)
      return;
    
    while(left < right){
      int temp = arr[left];
      arr[left] = arr[right];
      arr[right] = temp;
      
      left++;
      right--;
      
    }
  }
  public static void main(String[] args) {
  
    rotate(arr, 3);
    //print an array
    System.out.println(Arrays.toString(arr));
  }
}
    
    for(int i = 0; i < reverse.length; i++){
      System.out.print(reverse[i]);
    }
   
  }
}
