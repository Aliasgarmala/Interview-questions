import java.io.*;
import java.util.*;

/*
 * nth row Pascal's triangle 
 * 1st: Brute Force approach
 * 2nd: Recurssion
 * 3rd: ArrayList
 
 
 1
 1 1       //previous
 1 2 1     //next
 1 3 3 1
 1 4 6 4 1
 1 5 10 10 5 1
 */


// In first approach try to find a pattern 
//like for all these problems define the base case i.e row 1 
class Solution {
  
  public static int[] nthPascalRow(int rowNum){
   
    //define the obvious case of rowNum:1
    if(rowNum == 1){
      int [] result = {1};
      return result;
    }
    
     //define the obvious case of rowNum:2
    if(rowNum == 2){
       int [] result = {1,1};
      return result;
    }
    
    //for each row you have to start with rowNum 2 as previous
    int [] previous = {1,1};
    
    for(int row = 3; row <= rowNum; row++){
      
      //size is as the row number
      int [] next = new int[row];
      
      //first element of any row is always 1
      next[0] = 1;
      
      //leave first and last element from  the loop
      for(int column= 1; column < (row -1); column++){
        //current index = previousIndex -1 + previousIndex
        next[column] = previous[column -1] + previous[column];
      }
      
      //last element of any row is always 1
      next[row -1 ] = 1;
      
      //change till we get to the nth row which is rowNum
      previous = next;
      
    }
    //previous holds the nth row
    return previous;
  }
  
  public static void main(String[] args) {
    
    for(int i  = 1; i <= 8; i++){
      int [] result = nthPascalRow(i);

      for(int r : result){
        System.out.print(r + " ");
      }
      System.out.println();
      
    }
    
  }
}
