import java.io.*;
import java.util.*;

/*
 * Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
"A man, a plan, a canal: Panama" is a palindrome.
"race a car" is not a palindrome.
 */

class Solution {
  public static boolean isPalandrome(String s){
    int add = 0;
    //to lowercase very important
    String str = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
    
    Stack<Character> stack = new Stack<Character>();
   
    for(int i = 0; i < str.length() / 2; i++){
       stack.push(str.charAt(i));
      
    }
    
    if(str.length() % 2 == 1){
      add = 1;
    }
    
    for(int i = (str.length()/2 + add); i < str.length(); i++){
     
      if(stack.pop() != str.charAt(i)){
        return false;
        
      }
      
    }
    
    return true;
  }
  
  
  
  public static void main(String[] args) {
   System.out.println("Is valid palindrom: "+isPalandrome("race a car"));
  }
  
}

This takes O(n) time and O(n) space

The below solution doesn't use stack and runs in O(1)

class Solution {
  public static boolean isPalandrome(String s){
   
    //to lowercase very important
    String str = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
    
    for(int i = 0; i < str.length() / 2; i++){
      if(str.charAt(i) != str.charAt(str.length() - 1 - i))
        return false;
    }
    
    return true;
  }
  
  
  
  public static void main(String[] args) {
   System.out.println("Is valid palindrom: "+isPalandrome("A man, a plan, a canal: Panama"));
  }
  
}
